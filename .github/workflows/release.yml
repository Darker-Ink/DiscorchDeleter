name: Release Script

on:
  push:
    branches:
      - master
    paths:
      - 'tampermonkey.config.json'

jobs:
  check-version-change:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check-version.outputs.version_changed }}
      new_version: ${{ steps.check-version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2 # Enough to compare HEAD and HEAD~1

      - name: Check for version change in tampermonkey.config.json
        id: check-version
        run: |
          CURRENT_VERSION=$(jq -r '.version' tampermonkey.config.json)
          echo "Current version is $CURRENT_VERSION"
          
          # Check if the file existed in the previous commit
          if git cat-file -e HEAD~1:tampermonkey.config.json 2>/dev/null; then
            # Get previous version
            git show HEAD~1:tampermonkey.config.json > previous_config.json
            PREVIOUS_VERSION=$(jq -r '.version' previous_config.json)
            echo "Previous version was $PREVIOUS_VERSION"
            
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
              echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            else
              echo "version_changed=false" >> $GITHUB_OUTPUT
              echo "Version unchanged"
            fi
            rm previous_config.json # Clean up
          else
            # File didn't exist in previous commit or this is the first commit
            echo "Previous tampermonkey.config.json not found or this is the first commit with it."
            echo "Assuming version changed for initial release."
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: check-version-change
    if: needs.check-version-change.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create releases and tags
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for git tags and logs

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build script
        run: npm run build

      - name: Get script name
        id: script-name
        run: |
          SCRIPT_PATH=$(ls dist/*.user.js | head -n1)
          if [ -z "$SCRIPT_PATH" ]; then
            echo "Error: No .user.js file found in dist/ directory."
            exit 1
          fi
          echo "script_path=$SCRIPT_PATH" >> $GITHUB_OUTPUT
          echo "script_filename=$(basename $SCRIPT_PATH)" >> $GITHUB_OUTPUT
          echo "Found script: $SCRIPT_PATH"
          
      - name: Get commit history
        id: get-commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # gh cli needs this
        run: |
          PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          echo "Previous tag: ${PREVIOUS_TAG:-none}"
          
          COMMIT_LOG_LINES=()
          
          if [ -n "$PREVIOUS_TAG" ]; then
            # Fetch commits since the previous tag using GitHub API
            # jq query:
            # .[] iterates over each commit
            # .author.login gives GitHub username (if available, otherwise .commit.author.name)
            # .sha | substr(0;7) gives short SHA
            # .html_url is the commit URL
            # .commit.message | split("\n")[0] gives the first line of the commit message
            RAW_COMMITS_JSON=$(gh api "repos/${GITHUB_REPOSITORY}/compare/${PREVIOUS_TAG}...HEAD" --jq '.commits')
            
            if [ -n "$RAW_COMMITS_JSON" ] && [ "$RAW_COMMITS_JSON" != "null" ] && [ "$RAW_COMMITS_JSON" != "[]" ]; then
              while IFS= read -r line; do
                COMMIT_LOG_LINES+=("$line")
              done < <(echo "$RAW_COMMITS_JSON" | jq -r '.[] | 
                (if .author and .author.login and (.author.login != "") then "@" + .author.login else .commit.author.name end) + 
                " [" + (.sha | substr(0;7)) + "](" + .html_url + "): " + 
                (.commit.message | split("\n")[0])')
            fi
          else
            echo "No previous vX.Y.Z tag found. Fetching last 10 commits."
            RAW_COMMITS_JSON=$(gh api "repos/${GITHUB_REPOSITORY}/commits?per_page=10" --jq '.')
            
            if [ -n "$RAW_COMMITS_JSON" ] && [ "$RAW_COMMITS_JSON" != "null" ] && [ "$RAW_COMMITS_JSON" != "[]" ]; then
              while IFS= read -r line; do
                COMMIT_LOG_LINES+=("$line")
              done < <(echo "$RAW_COMMITS_JSON" | jq -r '.[] | 
                (if .author and .author.login and (.author.login != "") then "@" + .author.login else .commit.author.name end) + 
                " [" + (.sha | substr(0;7)) + "](" + .html_url + "): " + 
                (.commit.message | split("\n")[0])')
            fi
          fi
          
          COMMIT_LOG_BODY=""
          if [ ${#COMMIT_LOG_LINES[@]} -eq 0 ]; then
            if [ -n "$PREVIOUS_TAG" ]; then
              COMMIT_LOG_BODY="No notable changes detected since ${PREVIOUS_TAG}."
            else
              COMMIT_LOG_BODY="Initial release or no commit history to display."
            fi
          else
            # Join lines with newline character
            COMMIT_LOG_BODY=$(printf "%s\n" "${COMMIT_LOG_LINES[@]}")
            # Remove trailing newline if any (printf might add one extra)
            COMMIT_LOG_BODY=${COMMIT_LOG_BODY%$'\n'}
          fi
          
          # Escape '%' for GITHUB_OUTPUT heredoc
          COMMIT_LOG_BODY="${COMMIT_LOG_BODY//'%'/'%25'}"
          
          echo "commit_log<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_LOG_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version-change.outputs.new_version }}
          name: Release v${{ needs.check-version-change.outputs.new_version }}
          body: |
            # Release v${{ needs.check-version-change.outputs.new_version }}
            
            **Installation**
            1. Install [Violentmonkey](https://violentmonkey.github.io/) extension for your browser
            2. Install [Vencord](https://vencord.dev/download/)'s user script
            3. Click the "${{ steps.script-name.outputs.script_filename }}" file below to install this script
            
            **What's Changed**
            
            <details>
              <summary>Changes since last release</summary>
              
            ${{ steps.get-commits.outputs.commit_log }}
            </details>
          files: ${{ steps.script-name.outputs.script_path }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
